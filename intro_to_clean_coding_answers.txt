1. Clean code is ensuring that your code is easy to understand and decipher, in that any other programmer can easily identify what your code is trying to acheive without much digging. It means that your code uses easy to understand class names and isn't over-engineered where multiple functions are doing the exact same thing using a DRY principle in your code in that you don't repeat the same functions more than once. Lastly the code should be properly nested which reduces the level of logical structures in each function.

2. Another commonly used object that relies on computers would be traffic lights. If the code that was used to run the traffic lights was not created using acceptable standards they could show the wrong lights at the wrong time and cause some serious car accidents in intersections.

3. I would not consider the code below to be clean code since it relies too heavily on comments to explain what each line of the code does. Also, they didn't use a good naming convention for the functions and each formula should have been broken up into 2 different functions instead of one long one.

`
FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION
`
`
FUNCTION toCelcius(x)
SET farenheight to (x-32) *(5/9)
PRINT farenheight
END FUNCTION

FUNCTION toFahrenheit(x)
SET celcius to x * 1.8000 + 32.00
PRINT celcius
END FUNCTION
`

4. I would consider the code below to be clean code in that the the function name is easy to understand, it's a simple function and contains the appropriate nesting convention.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

5a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION


5b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND guest.hasOverdueBooks = false AND guest.outstandingFees = 0 THEN
    APPEND book to guest.books AND SET book.status to "Checked Out"
           PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

5c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

CLASS Balance
 FUNCTION displayBalance
    PRINT balance
 END FUNCTION
 END CLASS

 CLASS Deposit
 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION
END CLASS

CLASS Wirthdraw
 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION
 END CLASS

CLASS CreditCard
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION
END CLASS

CLASS Checking
 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION
END CLASS


 ....
 ....
 ....

END CLASS

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

var integers = [20,1,3,1];

var arrSum = integers.reduce((a, b) => a + b, 0);

function isSquare(x) {
   var square = Math.sqrt(x); 
    if (square - Math.floor(square) === 0){
          return square;
        }
        else {
          return arrSum;
        }
}

console.log(isSquare(arrSum))

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function hasDuplicates(arr) {
  var myObject = {};

  for (var key in arr) {
    if (myObject[arr[key]])
      return true;
    else
      myObject[arr[key]] = true;
  }
  return false;
}

console.log(hasDuplicates([1,2,3,4,5,6,7]))

